package view;

import dao.KhachHang_DAO;
import entity.KhachHang;

import javax.swing.*;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.List;

public class KhachHang_View extends JPanel implements ActionListener {
    private JTable table;
    private DefaultTableModel model;
    private JTextField searchField;
    private JButton btnAdd, btnFilter;
    private KhachHang_DAO khDAO = new KhachHang_DAO();

    public KhachHang_View() {
        setLayout(new BorderLayout());
        setBackground(new Color(252, 249, 244));

        // ===== HEADER =====
        JPanel header = new JPanel(new BorderLayout());
        header.setOpaque(false);
        header.setBorder(new EmptyBorder(10, 20, 10, 20));

        JLabel title = new JLabel("Qu·∫£n l√Ω kh√°ch h√†ng");
        title.setFont(new Font("Arial", Font.BOLD, 22));
        title.setForeground(new Color(40, 30, 20));

        JLabel subtitle = new JLabel("Qu·∫£n l√Ω th√¥ng tin kh√°ch h√†ng");
        subtitle.setFont(new Font("Arial", Font.PLAIN, 14));
        subtitle.setForeground(new Color(100, 90, 80));

        JPanel titlePanel = new JPanel(new GridLayout(2, 1));
        titlePanel.setOpaque(false);
        titlePanel.add(title);
        titlePanel.add(subtitle);

        btnAdd = new JButton("+ Th√™m kh√°ch h√†ng m·ªõi");
        btnAdd.setBackground(new Color(220, 100, 30));
        btnAdd.setForeground(Color.WHITE);
        btnAdd.setFocusPainted(false);
        btnAdd.setFont(new Font("Arial", Font.BOLD, 13));
        btnAdd.setBorder(new EmptyBorder(8, 15, 8, 15));

        header.add(titlePanel, BorderLayout.WEST);
        header.add(btnAdd, BorderLayout.EAST);

        add(header, BorderLayout.NORTH);

        // ===== STATS =====
        JPanel statsPanel = new JPanel(new GridLayout(1, 4, 20, 0));
        statsPanel.setOpaque(false);
        statsPanel.setBorder(new EmptyBorder(10, 20, 10, 20));

        // S·∫Ω c·∫≠p nh·∫≠t s·ªë li·ªáu th·ª±c t·∫ø t·ª´ database
        statsPanel.add(createStatBox("0", "T·ªïng kh√°ch h√†ng", new Color(255, 153, 51)));
        statsPanel.add(createStatBox("0", "Th√†nh vi√™n VIP", new Color(100, 200, 100)));
        statsPanel.add(createStatBox("0", "Th√†nh vi√™n th∆∞·ªùng", new Color(100, 150, 200)));
        statsPanel.add(createStatBox("0", "Kh√°ch l·∫ª", new Color(150, 150, 150)));

        // ===== SEARCH =====
        JPanel searchPanel = new JPanel(new BorderLayout(10, 0));
        searchPanel.setBorder(new EmptyBorder(10, 20, 10, 20));
        searchPanel.setOpaque(false);

        searchField = new JTextField("T√¨m ki·∫øm kh√°ch h√†ng...");
        searchField.setFont(new Font("Arial", Font.ITALIC, 13));
        searchField.setForeground(Color.GRAY);
        searchField.setBorder(BorderFactory.createCompoundBorder(
                new LineBorder(new Color(210, 120, 40), 2, true),
                new EmptyBorder(5, 10, 5, 10)
        ));


        // X·ª≠ l√Ω placeholder
        searchField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (searchField.getText().equals("T√¨m ki·∫øm kh√°ch h√†ng...")) {
                    searchField.setText("");
                    searchField.setFont(new Font("Arial", Font.PLAIN, 13));
                    searchField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (searchField.getText().isEmpty()) {
                    searchField.setText("T√¨m ki·∫øm kh√°ch h√†ng...");
                    searchField.setFont(new Font("Arial", Font.ITALIC, 13));
                    searchField.setForeground(Color.GRAY);
                }
            }
        });

        // T√¨m ki·∫øm khi nh·∫•n Enter
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    timKiemKhachHang();
                }
            }
        });

        btnFilter = new JButton("T·∫•t c·∫£ c√°c h·∫°ng ‚ñæ");
        btnFilter.setFocusPainted(false);

        searchPanel.add(searchField, BorderLayout.CENTER);
        searchPanel.add(btnFilter, BorderLayout.EAST);

        // ===== TABLE =====
        String[] cols = {"M√£ KH", "T√™n KH", "SƒêT", "Email", "ƒêi·ªÉm TL", "Th√†nh vi√™n", "Thao t√°c"};
        model = new DefaultTableModel(cols, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Kh√¥ng cho ph√©p edit tr·ª±c ti·∫øp
            }
        };
        
        table = new JTable(model);
        table.setRowHeight(35);
        table.setFont(new Font("Arial", Font.PLAIN, 13));
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 13));
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        JScrollPane scroll = new JScrollPane(table);
        scroll.setBorder(new EmptyBorder(10, 20, 20, 20));

        JPanel tablePanel = new JPanel(new BorderLayout());
        JLabel lblTableTitle = new JLabel("Danh s√°ch kh√°ch h√†ng");
        lblTableTitle.setFont(new Font("Arial", Font.BOLD, 16));
        lblTableTitle.setBorder(new EmptyBorder(5, 20, 5, 0));

        JLabel lblTableSub = new JLabel("Qu·∫£n l√Ω th√¥ng tin kh√°ch h√†ng v√† ƒëi·ªÉm t√≠ch l≈©y");
        lblTableSub.setFont(new Font("Arial", Font.PLAIN, 13));
        lblTableSub.setForeground(Color.DARK_GRAY);
        lblTableSub.setBorder(new EmptyBorder(0, 20, 10, 0));

        JPanel tblTitlePanel = new JPanel(new GridLayout(2, 1));
        tblTitlePanel.setOpaque(false);
        tblTitlePanel.add(lblTableTitle);
        tblTitlePanel.add(lblTableSub);

        tablePanel.add(tblTitlePanel, BorderLayout.NORTH);
        tablePanel.add(scroll, BorderLayout.CENTER);

        // ===== MAIN CONTENT =====
        JPanel content = new JPanel(new BorderLayout());
        content.setOpaque(false);
        content.add(statsPanel, BorderLayout.NORTH);
        content.add(searchPanel, BorderLayout.CENTER);
        content.add(tablePanel, BorderLayout.SOUTH);

        add(content, BorderLayout.CENTER);

        // ===== ƒêƒÉng k√Ω s·ª± ki·ªán =====
        btnAdd.addActionListener(this);
        btnFilter.addActionListener(this);
        
        // X·ª≠ l√Ω double click ƒë·ªÉ s·ª≠a
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    suaKhachHang();
                }
            }
        });

        // ===== Load d·ªØ li·ªáu ban ƒë·∫ßu =====
        loadDataTable(khDAO.getAllKhachHang());
        updateStats();
    }

    // ===== Hi·ªÉn th·ªã d·ªØ li·ªáu =====
    private void loadDataTable(List<KhachHang> list) {
        model.setRowCount(0);
        for (KhachHang kh : list) {
            model.addRow(new Object[]{
                    kh.getMaKhachHang(),
                    kh.getTenKhachHang(),
                    kh.getSdt(),
                    kh.getEmail(),
                    kh.getDiemTichLuy(),
                    kh.isLaThanhVien() ? "C√≥" : "Kh√¥ng",
                    "‚úé  üóë" // Thao t√°c
            });
        }
    }

    // ===== C·∫≠p nh·∫≠t th·ªëng k√™ =====
    private void updateStats() {
        List<KhachHang> all = khDAO.getAllKhachHang();
        int total = all.size();
        int vip = 0, regular = 0, guest = 0;
        
        for (KhachHang kh : all) {
            if (kh.isLaThanhVien()) {
                if (kh.getDiemTichLuy() >= 1000) vip++;
                else regular++;
            } else {
                guest++;
            }
        }
        
        // C·∫≠p nh·∫≠t c√°c stat box (c·∫ßn reference ƒë·∫øn c√°c label)
        // Ho·∫∑c refresh l·∫°i to√†n b·ªô panel
    }

    // ===== T√¨m ki·∫øm =====
    private void timKiemKhachHang() {
        String keyword = searchField.getText().trim();
        if (keyword.equals("T√¨m ki·∫øm kh√°ch h√†ng...") || keyword.isEmpty()) {
            loadDataTable(khDAO.getAllKhachHang());
        } else {
            loadDataTable(khDAO.timKiemKhachHang(keyword));
        }
    }

    // ===== S·ª± ki·ªán =====
    @Override
    public void actionPerformed(ActionEvent e) {
        Object o = e.getSource();

        if (o.equals(btnAdd)) {
            themKhachHang();
        } else if (o.equals(btnFilter)) {
            // Hi·ªÉn th·ªã menu filter
            showFilterMenu();
        }
    }

    // ===== Menu filter =====
    private void showFilterMenu() {
        JPopupMenu menu = new JPopupMenu();
        
        JMenuItem itemAll = new JMenuItem("T·∫•t c·∫£");
        JMenuItem itemVIP = new JMenuItem("Th√†nh vi√™n VIP (‚â•1000 ƒëi·ªÉm)");
        JMenuItem itemRegular = new JMenuItem("Th√†nh vi√™n th∆∞·ªùng");
        JMenuItem itemGuest = new JMenuItem("Kh√°ch l·∫ª");
        
        itemAll.addActionListener(e -> {
            loadDataTable(khDAO.getAllKhachHang());
            btnFilter.setText("T·∫•t c·∫£ c√°c h·∫°ng ‚ñæ");
        });
        
        itemVIP.addActionListener(e -> {
            List<KhachHang> list = khDAO.getAllKhachHang();
            list.removeIf(kh -> !kh.isLaThanhVien() || kh.getDiemTichLuy() < 1000);
            loadDataTable(list);
            btnFilter.setText("Th√†nh vi√™n VIP ‚ñæ");
        });
        
        itemRegular.addActionListener(e -> {
            List<KhachHang> list = khDAO.getAllKhachHang();
            list.removeIf(kh -> !kh.isLaThanhVien() || kh.getDiemTichLuy() >= 1000);
            loadDataTable(list);
            btnFilter.setText("Th√†nh vi√™n th∆∞·ªùng ‚ñæ");
        });
        
        itemGuest.addActionListener(e -> {
            List<KhachHang> list = khDAO.getAllKhachHang();
            list.removeIf(KhachHang::isLaThanhVien);
            loadDataTable(list);
            btnFilter.setText("Kh√°ch l·∫ª ‚ñæ");
        });
        
        menu.add(itemAll);
        menu.add(itemVIP);
        menu.add(itemRegular);
        menu.add(itemGuest);
        
        menu.show(btnFilter, 0, btnFilter.getHeight());
    }

    // ===== Th√™m kh√°ch h√†ng =====
    private void themKhachHang() {
        String ma = JOptionPane.showInputDialog(this, "Nh·∫≠p m√£ KH:");
        if (ma == null || ma.trim().isEmpty()) return;

        // Ki·ªÉm tra tr√πng m√£
        for (int i = 0; i < model.getRowCount(); i++) {
            if (ma.equals(model.getValueAt(i, 0))) {
                JOptionPane.showMessageDialog(this, "‚ùå M√£ kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i!");
                return;
            }
        }

        String ten = JOptionPane.showInputDialog(this, "Nh·∫≠p t√™n KH:");
        if (ten == null || ten.trim().isEmpty()) return;
        
        String sdt = JOptionPane.showInputDialog(this, "Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i:");
        if (sdt == null || sdt.trim().isEmpty()) return;
        
        String email = JOptionPane.showInputDialog(this, "Nh·∫≠p email:");
        if (email == null || email.trim().isEmpty()) return;
        
        String diemStr = JOptionPane.showInputDialog(this, "Nh·∫≠p ƒëi·ªÉm t√≠ch l≈©y:", "0");
        if (diemStr == null) return;
        
        int diem = 0;
        try {
            diem = Integer.parseInt(diemStr);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "‚ùå ƒêi·ªÉm t√≠ch l≈©y ph·∫£i l√† s·ªë!");
            return;
        }
        
        boolean laTV = JOptionPane.showConfirmDialog(this, "L√† th√†nh vi√™n?", 
                "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;

        KhachHang kh = new KhachHang(ma, ten, sdt, email, diem, laTV);
        if (khDAO.insertKhachHang(kh)) {
            JOptionPane.showMessageDialog(this, "‚úÖ Th√™m th√†nh c√¥ng!");
            loadDataTable(khDAO.getAllKhachHang());
            updateStats();
        } else {
            JOptionPane.showMessageDialog(this, "‚ùå Th√™m th·∫•t b·∫°i!");
        }
    }

    // ===== S·ª≠a kh√°ch h√†ng =====
    private void suaKhachHang() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "‚ö† Ch·ªçn kh√°ch h√†ng ƒë·ªÉ s·ª≠a!");
            return;
        }

        String ma = model.getValueAt(row, 0).toString();
        String ten = JOptionPane.showInputDialog(this, "T√™n KH:", model.getValueAt(row, 1));
        if (ten == null) return;
        
        String sdt = JOptionPane.showInputDialog(this, "SƒêT:", model.getValueAt(row, 2));
        if (sdt == null) return;
        
        String email = JOptionPane.showInputDialog(this, "Email:", model.getValueAt(row, 3));
        if (email == null) return;
        
        String diemStr = JOptionPane.showInputDialog(this, "ƒêi·ªÉm TL:", model.getValueAt(row, 4));
        if (diemStr == null) return;
        
        int diem = 0;
        try {
            diem = Integer.parseInt(diemStr);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "‚ùå ƒêi·ªÉm t√≠ch l≈©y ph·∫£i l√† s·ªë!");
            return;
        }
        
        boolean laTV = JOptionPane.showConfirmDialog(this, "L√† th√†nh vi√™n?", 
                "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;

        KhachHang kh = new KhachHang(ma, ten, sdt, email, diem, laTV);
        if (khDAO.updateKhachHang(kh)) {
            JOptionPane.showMessageDialog(this, "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            loadDataTable(khDAO.getAllKhachHang());
            updateStats();
        } else {
            JOptionPane.showMessageDialog(this, "‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
        }
    }

    // ===== X√≥a kh√°ch h√†ng =====
    private void xoaKhachHang() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "‚ö† Ch·ªçn kh√°ch h√†ng ƒë·ªÉ x√≥a!");
            return;
        }

        String ma = model.getValueAt(row, 0).toString();
        int confirm = JOptionPane.showConfirmDialog(this, 
                "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh√°ch h√†ng " + ma + "?", 
                "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
                
        if (confirm == JOptionPane.YES_OPTION) {
            if (khDAO.deleteKhachHang(ma)) {
                JOptionPane.showMessageDialog(this, "üóë X√≥a th√†nh c√¥ng!");
                loadDataTable(khDAO.getAllKhachHang());
                updateStats();
            } else {
                JOptionPane.showMessageDialog(this, "‚ùå X√≥a th·∫•t b·∫°i!");
            }
        }
    }
    
    private JPanel createStatBox(String value, String label, Color color) {
        JPanel box = new JPanel(new BorderLayout());
        box.setBackground(Color.WHITE);
        box.setBorder(new CompoundBorder(
                new LineBorder(new Color(220, 220, 220), 1, true),
                new EmptyBorder(15, 15, 15, 15)
        ));

        JLabel valLabel = new JLabel(value, JLabel.LEFT);
        valLabel.setFont(new Font("Arial", Font.BOLD, 24));
        valLabel.setForeground(color.darker());

        JLabel textLabel = new JLabel(label, JLabel.LEFT);
        textLabel.setFont(new Font("Arial", Font.PLAIN, 13));

        JPanel inner = new JPanel(new GridLayout(2, 1));
        inner.setOpaque(false);
        inner.add(valLabel);
        inner.add(textLabel);

        box.add(inner, BorderLayout.CENTER);
        return box;
    }
}